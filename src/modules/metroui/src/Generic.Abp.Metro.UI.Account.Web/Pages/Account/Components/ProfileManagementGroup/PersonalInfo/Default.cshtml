@using Volo.Abp.Account.Localization
@using Volo.Abp.Users
@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Microsoft.Extensions.Localization
@using Volo.Abp.Data
@using Volo.Abp.Identity.Settings
@using Volo.Abp.Localization
@using Volo.Abp.ObjectExtending
@using Volo.Abp.Settings
@using Volo.Abp.AspNetCore.Mvc.UI.Theming
@using Generic.Abp.Metro.UI.Account.Web.Pages.Account.Components.ProfileManagementGroup.PersonalInfo
@inject IHtmlLocalizer<AccountResource> L
@inject ICurrentUser CurrentUser
@inject ISettingProvider SettingManager
@inject IThemeManager ThemeManager
@inject IStringLocalizerFactory StringLocalizerFactory
@model Generic.Abp.Metro.UI.Account.Web.Pages.Account.Components.ProfileManagementGroup.PersonalInfo.AccountProfilePersonalInfoManagementGroupViewComponent.PersonalInfoModel
@{
    var isUserNameUpdateEnabled = string.Equals(await SettingManager.GetOrNullAsync(IdentitySettingNames.User.IsUserNameUpdateEnabled), "true",
        StringComparison.OrdinalIgnoreCase);

    var isEmailUpdateEnabled = string.Equals(await SettingManager.GetOrNullAsync(IdentitySettingNames.User.IsEmailUpdateEnabled), "true",
        StringComparison.OrdinalIgnoreCase);
}

<form method="post" id="PersonalSettingsForm" >

    <input asp-for="ConcurrencyStamp" />

    <metro-input asp-for="UserName" readonly="!isUserNameUpdateEnabled" />
    <metro-input asp-for="Name" />
    <metro-input asp-for="Surname" />
    <metro-input asp-for="Email" readonly="!isEmailUpdateEnabled" />
    <metro-input asp-for="PhoneNumber" />

    @foreach (var propertyInfo in from propertyInfo in ObjectExtensionManager.Instance.GetProperties<AccountProfilePersonalInfoManagementGroupViewComponent.PersonalInfoModel>() let isAllowed = propertyInfo.Configuration.GetOrDefault(IdentityModuleExtensionConsts.ConfigurationNames.AllowUserToEdit) where isAllowed != null && isAllowed.Equals(true) where !propertyInfo.Name.EndsWith("_Text") select propertyInfo)
    {
        if (propertyInfo.Type.IsEnum || !propertyInfo.Lookup.Url.IsNullOrEmpty())
        {
            if (propertyInfo.Type.IsEnum)
            {
                Model.ExtraProperties.ToEnum(propertyInfo.Name, propertyInfo.Type);
            }
            <metro-select asp-for="ExtraProperties[propertyInfo.Name]" 
                        name="ExtraProperties.@propertyInfo.Name"
                        label="@propertyInfo.GetLocalizedDisplayName(StringLocalizerFactory)"
                        autocomplete-api-url="@propertyInfo.Lookup.Url"
                        autocomplete-selected-item-name="@Model.GetProperty(propertyInfo.Name + "_Text")"
                        autocomplete-selected-item-value="@Model.GetProperty(propertyInfo.Name)"
                        autocomplete-filter-param-name="@propertyInfo.Lookup.FilterParamName"
                        autocomplete-items-property-name="@propertyInfo.Lookup.ResultListPropertyName"
                        autocomplete-display-property-name="@propertyInfo.Lookup.DisplayPropertyName"
                        autocomplete-value-property-name="@propertyInfo.Lookup.ValuePropertyName">
            </metro-select>
        }
        else
        {
            <metro-input type="@propertyInfo.GetInputType()"
                       asp-for="ExtraProperties[propertyInfo.Name]"
                       name="ExtraProperties.@propertyInfo.Name"
                       label="@propertyInfo.GetLocalizedDisplayName(StringLocalizerFactory)"
                       asp-format="@propertyInfo.GetInputFormatOrNull()"
                       value="@propertyInfo.GetInputValueOrNull(Model.GetProperty(propertyInfo.Name))" />
        }
    }

    <metro-button accent-color="Primary" text="@L["Submit"].Value" class="mt-2" id="PersonalSettingsFormSubmitForm" />
</form>