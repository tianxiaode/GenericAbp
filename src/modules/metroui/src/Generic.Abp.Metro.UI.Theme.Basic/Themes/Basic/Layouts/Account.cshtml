@using Microsoft.Extensions.Localization
@using Generic.Abp.Metro.UI.MultiTenancy.Localization;
@using Generic.Abp.Metro.UI.Theme.Basic.Themes.Basic.Components.MainNavbar
@using Generic.Abp.Metro.UI.Theme.Basic.Bundling
@using Generic.Abp.Metro.UI.Widgets.Components.WidgetScripts
@using Generic.Abp.Metro.UI.Widgets.Components.WidgetStyles
@using Generic.Abp.Metro.UI.Bundling.TagHelpers
@using Generic.Abp.Metro.UI.TagHelpers.Alert
@using Generic.Abp.Metro.UI.Theme.Basic.Themes.Basic.Components.PageAlerts
@using Microsoft.Extensions.Options
@using Volo.Abp.AspNetCore.MultiTenancy
@using Volo.Abp.AspNetCore.Mvc.UI.Components.LayoutHook
@using Volo.Abp.AspNetCore.Mvc.UI.Theming
@using Volo.Abp.Localization
@using Volo.Abp.MultiTenancy
@using Volo.Abp.Ui.Branding
@using Volo.Abp.Ui.LayoutHooks
@inject IBrandingProvider BrandingProvider
@inject IOptions<AbpMultiTenancyOptions> MultiTenancyOptions 
@inject ICurrentTenant CurrentTenant
@inject IStringLocalizer<MetroUiMultiTenancyResource> MultiTenancyStringLocalizer
@inject ITenantResolveResultAccessor TenantResolveResultAccessor

@{
    Layout = null;
    var containerClass = ViewBag.FluidLayout == true ? "container-fluid" : "container"; //TODO: Better and type-safe options
    var rtl = CultureHelper.IsRtl ? "rtl" : string.Empty;
}

<!DOCTYPE html>

<html lang="@CultureInfo.CurrentCulture.Name" dir="@rtl">
<head>
    @await Component.InvokeLayoutHookAsync(LayoutHooks.Head.First, StandardLayouts.Account)

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <meta name="metro4:init" content="true">
    <meta name="metro4:locale" content="@CultureInfo.CurrentUICulture.Name">
    <meta name="metro4:week_start" content="1">

    <title>@(ViewBag.Title == null ? BrandingProvider.AppName : ViewBag.Title)</title>
    <metro-style-bundle name="@BasicThemeBundles.Styles.Global" />

    @if (ViewBag.Description != null)
    {
        <meta name="description" content="@(ViewBag.Description as string)" />
    }

    @await RenderSectionAsync("styles", false)

    @await Component.InvokeAsync(typeof(WidgetStylesViewComponent))

    @await Component.InvokeLayoutHookAsync(LayoutHooks.Head.Last, StandardLayouts.Account)
</head>
<body class="abp-account-layout @rtl">
    @await Component.InvokeLayoutHookAsync(LayoutHooks.Body.First, StandardLayouts.Account)

    @(await Component.InvokeAsync<MainNavbarViewComponent>())

    <div class="@containerClass">
        <div class="row flex-justify-center flex-align-center" style="min-height: calc(100vh - 60px);">
            <div class="cell " style="max-width: 440px">
            @if (MultiTenancyOptions.Value.IsEnabled &&
            (TenantResolveResultAccessor.Result?.AppliedResolvers?.Contains(CookieTenantResolveContributor.ContributorName) == true ||
            TenantResolveResultAccessor.Result?.AppliedResolvers?.Contains(QueryStringTenantResolveContributor.ContributorName) == true))
            {
            <div class="card rounded mb-3">
                <div class="card-content px-5">
                    <div class="row">
                        <div class="col">
                            <span style="font-size: .8em;" class="text-upper text-muted">@MultiTenancyStringLocalizer["Tenant"]</span><br/>
                            <h6 class="m-0 d-inline-block">
                                @if (CurrentTenant.Id == null)
                                {
                                    <span>
                                        @MultiTenancyStringLocalizer["NotSelected"]
                                    </span>
                                }
                                else
                                {
                                    <strong>@(CurrentTenant.Name ?? CurrentTenant.Id.Value.ToString())</strong>
                                }
                            </h6>
                        </div>
                        <div class="col-auto">
                            <a id="AbpTenantSwitchLink" href="javascript:;" class="button small mt-3 outline primary">@MultiTenancyStringLocalizer["Switch"]</a>
                        </div>
                    </div>
                </div>
            </div>
            }
            @(await Component.InvokeAsync<PageAlertsViewComponent>())
            @await Component.InvokeLayoutHookAsync(LayoutHooks.PageContent.First, StandardLayouts.Account)
            @RenderBody()
            @await Component.InvokeLayoutHookAsync(LayoutHooks.PageContent.Last, StandardLayouts.Account)
        </div>
    </div>
</div>


    <metro-script-bundle name="@BasicThemeBundles.Scripts.Global" />

    <script src="~/metro/ApplicationLocalizationScript?cultureName=@CultureInfo.CurrentUICulture.Name"></script>
    <script src="~/metro/ApplicationConfigurationScript"></script>
    <script src="~/metro/ServiceProxyScript?type=metro"></script>

    @await RenderSectionAsync("scripts", false)

    @await Component.InvokeAsync(typeof(WidgetScriptsViewComponent))

    @await Component.InvokeLayoutHookAsync(LayoutHooks.Body.Last, StandardLayouts.Account)
</body>
</html>
