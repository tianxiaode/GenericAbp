@page
@using Microsoft.AspNetCore.Mvc.Localization
@using Volo.Abp.Account.Localization
@using Volo.Abp.Account.Settings
@using Volo.Abp.AspNetCore.Mvc.UI.Theming;
@using Volo.Abp.Identity;
@using Volo.Abp.Settings
@using Generic.Abp.TailWindCss.Account.Web.Pages.Account
@model Generic.Abp.TailWindCss.Account.Web.Pages.Account.LoginModel
@inject IHtmlLocalizer<AccountResource> L
@inject Volo.Abp.Settings.ISettingProvider SettingProvider

@{
    Layout = "Shared/_AccountLayout";
}

@section scripts
    {
    <abp-script-bundle name="@typeof(LoginModel).FullName">
        <abp-script src="/Pages/Account/Login.js" />
    </abp-script-bundle>
}

            <h2 class="card-title">@L["Login"]</h2>
        @if (Model.EnableLocalLogin)
        {
            <form method="post">
                <div class="form-control w-full max-w-xs mb-4 {controlClass}">
                    <div class="input input-bordered focus:border-primary focus-within:border-primary flex items-center gap-2">
                    <i class="fas fa-user text-info w-4 h-4 opacity-70"></i>
                <input asp-for="LoginInput.UserNameOrEmailAddress" class="grow" autocomplete="username" placeholder="@L[" LoginInput.UserNameOrEmailAddress"]" onchange="onInputValueChange(event)" />
                <button tabindex="-1" type="button" class="btn btn-ghost btn-sm clear-button hidden " onclick="clearInputValue(event)">
                        <i class=" fas fa-times w-4 h-4 opacity-70 clear-button"></i>
                        </button>
                    </div>
                </div>
                <div class="form-control w-full max-w-xs mb-4 {controlClass}">
                    <div class="input input-bordered focus:border-primary focus-within:border-primary flex items-center gap-2">
                        <i  class="fas fa-key text-info w-4 h-4 opacity-70" ></i>
                        <input asp-for="LoginInput.Password" class="grow" autocomplete="current-password" placeholder="@L[" LoginInput.UserNameOrEmailAddress"]" onchange="onInputValueChange(event)" />
                    <button tabindex="-1" type="button" class="btn btn-ghost btn-sm clear-button hidden" onclick="clearInputValue(event)" pattern=".*">
                        <i class=" fas fa-times w-4 h-4 opacity-70 clear-button"></i>
                        </button>
                        <button tabindex="-1" type="button" class="btn btn-ghost btn-sm clear-button hidden" onclick="clearInputValue(event)" pattern=".*">
                            <i class=" fas fa-eye w-4 h-4 opacity-70 clear-button"></i>
                        </button>
                    </div>
                </div>

                <div class="flex justify-between items-center mt-4">
                    <div class="form-control">
                        <label class="label cursor-pointer">
                            <input asp-for="LoginInput.RememberMe" name="rememberMe" type="checkbox" class="checkbox"/>
                            <span class="label-text ml-2">@L["RememberMe"].Value</span>
                        </label>
                    </div>
                    <div class="flex-1 text-right">
                        <a class="text-sm text-primary" href="@Url.Page("./ForgotPassword", new { returnUrl = Model.ReturnUrl, returnUrlHash = Model.ReturnUrlHash })">@L["ForgotPassword"]</a>
                    </div>
                </div>

                <button type="submit" class="btn btn-primary w-full text-white text-lg mt-4">@L["Login"]</button>
            </form>
        }

        @if (Model.VisibleExternalProviders.Any())
        {
            <div class="mt-2">
                <h5>@L["OrLoginWith"]</h5>
                <form asp-page="./Login" asp-page-handler="ExternalLogin" asp-route-returnUrl="@Model.ReturnUrl" asp-route-returnUrlHash="@Model.ReturnUrlHash" method="post">
                    @foreach (var provider in Model.VisibleExternalProviders)
                    {
                        <button type="submit" class="btn btn-primary m-1" name="provider" value="@provider.AuthenticationScheme" title="@L["LogInUsingYourProviderAccount", provider.DisplayName]">@provider.DisplayName</button>
                    }
                </form>
            </div>
        }
        
        @if (await SettingProvider.IsTrueAsync(AccountSettingNames.IsSelfRegistrationEnabled))
        {
            <div class=" font-bold text-sm mt-2">
                    @L["AreYouANewUser"]
                    <a href="@Url.Page("./Register", new {returnUrl = Model.ReturnUrl, returnUrlHash = Model.ReturnUrlHash})" class="text-sm text-primary">@L["Register"]</a>
            </div>

        }


        @if (!Model.EnableLocalLogin && !Model.VisibleExternalProviders.Any())
        {
            <div class="alert alert-warning">
                <strong>@L["InvalidLoginRequest"]</strong>
                @L["ThereAreNoLoginSchemesConfiguredForThisClient"]
            </div>
        }

